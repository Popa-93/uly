{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["touches","soundURL","name","Touche","props","handleClick","bind","handleSongFinishedPlaying","state","playStatus","Sound","status","STOPPED","this","setState","PLAYING","Fragment","onClick","url","onFinishedPlaying","React","Component","App","listeTouches","map","touche","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAOMA,EAAU,CACZ,CACEC,SAAW,UACXC,KAAO,OAET,CACED,SAAW,gBACXC,KAAO,aAET,CACED,SAAW,aACXC,KAAO,WAIPC,E,kDAEJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,0BAA4B,EAAKA,0BAAL,gBACjC,EAAKC,MAAQ,CAAEC,WAAaC,IAAMC,OAAOC,SAJxB,E,0DAQjBC,KAAKC,SAAU,CAACL,WAAYC,IAAMC,OAAOI,Y,kDAIzCF,KAAKC,SAAU,CAACL,WAAYC,IAAMC,OAAOC,Y,+BAIzC,OACA,eAAC,IAAMI,SAAP,WACE,wBAAQC,QAASJ,KAAKR,YAAtB,SAAoCQ,KAAKT,MAAMF,OAC/C,cAAC,IAAD,CAAOgB,IAAKL,KAAKT,MAAMH,SACrBQ,WAAYI,KAAKL,MAAMC,WACvBU,kBAAmBN,KAAKN,mC,GAvBXa,IAAMC,WA0CZC,E,uKAVX,IAAMC,EAAevB,EAAQwB,KAAM,SAACC,GAAD,OACjC,cAAC,EAAD,CAAQvB,KAAMuB,EAAOvB,KAAwBD,SAAUwB,EAAOxB,UAA9BwB,EAAOvB,SACzC,OACE,qBAAKwB,UAAU,MAAf,SACGH,Q,GAPSH,IAAMC,WCvCTM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2dd46e23.chunk.js","sourcesContent":["import './App.css';\n\nimport React from 'react';\nimport Sound from 'react-sound';\n\n\n\nconst touches = [\n    {\n      soundURL : \"coq.mp3\",\n      name : \"Coq\"\n    },\n    {\n      soundURL : \"chèvre.mp3\",\n      name : \"Chèvre\"\n    },\n    {\n      soundURL : \"klaxon.mp3\",\n      name : \"Klaxon\"\n    }\n  ];\n\nclass Touche extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleSongFinishedPlaying = this.handleSongFinishedPlaying(this);\n    this.state = { playStatus : Sound.status.STOPPED }\n  }\n\n  handleClick() {\n    this.setState( {playStatus: Sound.status.PLAYING} );\n  }\n\n  handleSongFinishedPlaying() {\n    this.setState( {playStatus: Sound.status.STOPPED} )\n  }\n\n  render() {\n    return (\n    <React.Fragment>\n      <button onClick={this.handleClick}>{this.props.name}</button>\n      <Sound url={this.props.soundURL}\n        playStatus={this.state.playStatus}\n        onFinishedPlaying={this.handleSongFinishedPlaying}/>\n    </React.Fragment>\n    );\n  }\n}\n\nclass App extends React.Component {\n  \n    render() {\n    const listeTouches = touches.map ( (touche) =>\n      <Touche name={touche.name} key={touche.name} soundURL={touche.soundURL}/>);\n    return (\n      <div className=\"App\">\n        {listeTouches}\n      </div>\n      );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}